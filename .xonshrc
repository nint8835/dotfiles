import platform
import os
import urllib.request
import zipfile
import shutil
import time

from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler


if platform.system() == "Windows":
    $HOMEDIR = $USERPROFILE.replace("\\", "/")
    $USERBIN = os.path.join($USERPROFILE, ".bin").replace("\\", "/")

    if not os.path.isdir(os.path.join($USERPROFILE, ".bin")):
        print("Installing GnuWin32 coreutils...")
        os.mkdir(os.path.join($USERPROFILE, ".bin"))
        cd $USERBIN
        print("Downloading GnuWin32 dependencies...")
        urllib.request.urlretrieve("https://downloads.sourceforge.net/project/gnuwin32/coreutils/5.3.0/coreutils-5.3.0-dep.zip", "coreutils-dep.zip")
        print("Extracting dependencies...")
        with zipfile.ZipFile("coreutils-dep.zip") as f:
            f.extract("bin/libiconv2.dll")
            f.extract("bin/libintl3.dll")
        del coreutils-dep.zip

        print("Downloading GnuWin32 coreutils...")
        urllib.request.urlretrieve("https://downloads.sourceforge.net/project/gnuwin32/coreutils/5.3.0/coreutils-5.3.0-bin.zip", "coreutils.zip")
        print("Extracting coreutils...")
        with zipfile.ZipFile("coreutils.zip") as f:
            for item in f.infolist():
                if item.filename.startswith("bin/"):
                    f.extract(item)
        $[del coreutils.zip]
        for f in os.listdir("bin"):
            shutil.move(os.path.join("bin", f), f)
        os.rmdir("bin")
        print("Coreutils successfully installed.")

        cd $HOMEDIR

    if $USERBIN not in $PATH:
        $PATH.append($USERBIN)
else:
    $HOMEDIR = $HOME

class CompileHandler(FileSystemEventHandler):
    def __init__(self, filename):
        super().__init__()
        self.filename = filename[:-3]
    def on_modified(self, event):
        f = event.src_path
        if f.endswith(".md") or f.endswith(".py"):
            print("Changes detected. Recompiling...")
            hercule @(self.filename + ".md") | pandoc -o @(self.filename + ".pdf")

def _compile_markdown(filename):
    print("Listening for file changes... Press CTRL+C to quit.")
    handler = CompileHandler(filename[0])
    observer = Observer()
    observer.schedule(handler, os.getcwd(), recursive=True)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        try:
            observer.stop()
        except AttributeError:
            pass
aliases["config"] = "git --git-dir=$HOMEDIR/.dotfiles --work-tree=$HOMEDIR"
aliases["cd_school"] = 'cd "G:\\My Drive\\School"'
aliases["md_compile"] = _compile_markdown
aliases["vscode_dump"] = "code --list-extensions > $HOMEDIR/AppData/Roaming/Code/User/extensions"

$PROMPT = "{RED}{user}{WHITE}@{RED}{hostname} {BLUE}{cwd} {prompt_end} "
